resource "aws_vpc" "main" {
  cidr_block           = var.vpc_cidr
  enable_dns_support   = true
  enable_dns_hostnames = true

  tags = {
    Name = "${terraform.workspace}-vpc"
  }
}

resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "${terraform.workspace}-igw"
  }

  lifecycle {
    prevent_destroy = false
  }
}

resource "aws_subnet" "public_subnet" {
  count             = length(var.public_subnets)
  vpc_id           = aws_vpc.main.id
  cidr_block       = var.public_subnets[count.index]
  map_public_ip_on_launch = true
  availability_zone = element(var.availability_zones, count.index)

  tags = {
    Name = "${terraform.workspace}-public-${count.index}"
    "kubernetes.io/role/elb" = "1"
  }
}

resource "aws_subnet" "private_subnet" {
  count             = length(var.private_subnets)
  vpc_id           = aws_vpc.main.id
  cidr_block       = var.private_subnets[count.index]
  availability_zone = element(var.availability_zones, count.index)

  tags = {
    Name = "${terraform.workspace}-private-${count.index}"
    "kubernetes.io/role/internal-elb" = "1"
  }
}

resource "aws_eip" "nat" {
  domain = "vpc"

  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_nat_gateway" "nat" {
  allocation_id = aws_eip.nat.id
  subnet_id     = aws_subnet.public_subnet[0].id

  tags = {
    Name = "${terraform.workspace}-nat"
  }

  depends_on = [aws_internet_gateway.igw]

  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_route_table" "public_rt" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }

  tags = {
    Name = "${terraform.workspace}-public-rt"
  }
}

resource "aws_route_table" "private_rt" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.nat.id
  }

  tags = {
    Name = "${terraform.workspace}-private-rt"
  }
}

resource "aws_route_table_association" "public_assoc" {
  count          = length(var.public_subnets)
  subnet_id      = aws_subnet.public_subnet[count.index].id
  route_table_id = aws_route_table.public_rt.id

  depends_on = [aws_route_table.public_rt]
}

resource "aws_route_table_association" "private_assoc" {
  count          = length(var.private_subnets)
  subnet_id      = aws_subnet.private_subnet[count.index].id
  route_table_id = aws_route_table.private_rt.id

  depends_on = [aws_route_table.private_rt]
}

# Ensure EIP is disassociated before destroying the NAT Gateway
resource "aws_eip_association" "nat_disassociate" {
  instance_id = ""  # Leave empty or provide a specific instance ID if applicable
  public_ip   = aws_eip.nat.public_ip

  lifecycle {
    prevent_destroy = false  # Allow destruction of the EIP association
  }
}

# Ensure proper cleanup of the NAT Gateway after disassociating the EIP
resource "aws_nat_gateway" "nat_cleanup" {
  allocation_id = aws_eip.nat.id
  subnet_id     = aws_subnet.public_subnet[0].id

  depends_on = [aws_eip_association.nat_disassociate]  # Ensure EIP is disassociated before deleting the NAT Gateway

  lifecycle {
    create_before_destroy = true
    prevent_destroy = false  # Allow destruction of the NAT Gateway
  }
}

# Cleanup Internet Gateway after the NAT Gateway and EIP are properly disassociated
resource "aws_internet_gateway" "igw_cleanup" {
  vpc_id = aws_vpc.main.id

  lifecycle {
    prevent_destroy = false  # Allow destruction of the Internet Gateway
  }

  depends_on = [aws_nat_gateway.nat_cleanup]  # Ensure NAT Gateway cleanup before Internet Gateway cleanup
}

